<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: patterns | Tim Ross]]></title>
  <link href="http://timrossinfo.github.com/blog/categories/patterns/atom.xml" rel="self"/>
  <link href="http://timrossinfo.github.com/"/>
  <updated>2017-01-06T13:30:23+13:00</updated>
  <id>http://timrossinfo.github.com/</id>
  <author>
    <name><![CDATA[Tim Ross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managers vs Controllers]]></title>
    <link href="http://timrossinfo.github.com/blog/2013/07/03/managers-vs-controllers/"/>
    <updated>2013-07-03T15:10:00+12:00</updated>
    <id>http://timrossinfo.github.com/blog/2013/07/03/managers-vs-controllers</id>
    <content type="html"><![CDATA[<p>A conversation on Twitter last week got me thinking about how I name my classes, particularly the difference between a Manager and a Controller class.</p>

<p>For me, a Manager is the go-to-guy for a particular aspect of functionality or data. For example, a <code>FileManager</code> handles anything related to accessing the file system. A Manager class contains only class methods, or is implemented as a <a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton</a>, as no separate instances are usually required.</p>

<pre><code class="objective-c">[MyFileManager fileExistsAtPath:myPath]; // Class method
</code></pre>

<p>or
<code>objective-c
[[MyFileManager sharedManager] fileExistsAtPath:myPath]; // Singleton
</code></p>

<p>A Controller class co-ordinates a process. For example, a <code>PurchaseController</code> controls the series of actions in purchasing a product. A <code>ViewController</code> co-ordinates a series of actions for interacting with a View.</p>

<pre><code class="objective-c">MyPurchaseController *purchaseController = [[MyPurchaseController alloc] initWithDelegate:self];
[purchaseController purchaseProduct:productId]; // Begins purchase process
...
[purchaseController cancelPurchase]; // Cancels process
</code></pre>

<p>Everyone has their own naming preferences, and yours might be different. It&rsquo;s not really the names themselves that&rsquo;s important, but that the naming is consistent throughout the application. Remember, it&rsquo;s all about communicating intent to yourself and others who use your code.</p>
]]></content>
  </entry>
  
</feed>
